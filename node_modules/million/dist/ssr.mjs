import { m as morph } from './chunks/morph.mjs';
export { f as fromDomNodeToVNode, a as fromStringToDomNode } from './chunks/convert.mjs';
export { h, i as normalize } from './chunks/h.mjs';
import './chunks/render.mjs';

const refresh = (head, body) => {
  if (head)
    morph(head, document.head);
  if (body)
    morph(body, document.body);
};

const renderToString = (vnode) => {
  if (typeof vnode === "string")
    return vnode;
  if (vnode === void 0)
    return "<!-- -->";
  let attributes = "";
  let children = "";
  for (const prop in vnode.props) {
    if (!prop.toLowerCase().startsWith("on")) {
      attributes += ` ${prop}="${vnode.props[prop]}"`;
    }
  }
  if (htmlVoidElements.includes(vnode.tag)) {
    return `<${vnode.tag}${attributes} />`;
  }
  for (const child of vnode.children || []) {
    children += renderToString(child);
  }
  return `<${vnode.tag}${attributes}>${children}</${vnode.tag}>`;
};
const htmlVoidElements = [
  "area",
  "base",
  "basefont",
  "bgsound",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "image",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "menuitem",
  "meta",
  "nextid",
  "param",
  "source",
  "track",
  "wbr"
];

export { htmlVoidElements, refresh, renderToString };
