import { V as VNode, a as VEntity, D as DOMNode, E as Effect, b as VElement, c as VProps, d as Delta, e as VElementFlags, H as Hook } from './types-621449b5.js';
export { C as Commit, D as DOMNode, d as Delta, f as DeltaTypes, h as Driver, E as Effect, g as EffectTypes, F as Flags, O as OLD_VNODE_FIELD, b as VElement, a as VEntity, V as VNode, c as VProps } from './types-621449b5.js';

/**
 * Creates an Element from a VNode
 */
declare const createElement: (vnode?: VNode | VEntity | null | undefined, attachField?: boolean) => DOMNode;

/**
 * Diffs two VNode children and modifies the DOM node based on the necessary changes
 */
declare const useChildren: (drivers?: any[]) => any;

/**
 * Diffs a single DOM node and modifies the DOM node based on the necessary changes
 */
declare const useNode: (drivers: any[]) => any;

declare const updateProp: (el: HTMLElement | SVGElement, propName: string, oldPropValue: unknown, newPropValue: unknown, effects: Effect[]) => void;
/**
 * Diffs two VNode props and modifies the DOM node based on the necessary changes
 */
declare const useProps: (drivers?: any[]) => any;

/**
 * Attaches ns props to svg element
 */
declare const svg: (vnode: VElement) => VElement;
/**
 * Attaches ns props to an arbitrary element
 */
declare const ns: (tag: string, props: VProps, children?: VNode[] | undefined) => void;
/**
 * Generates a className string based on a classObject
 */
declare const className: (classObject: Record<string, boolean>) => string;
/**
 * Generates a style string based on a styleObject
 */
declare const style: (styleObject: Record<string, string>) => string;
/**
 * Converts key names from camelCase to kebab-case
 */
declare const kebab: (camelCaseObject: Record<string, unknown>) => Record<string, unknown>;
declare const Deltas: {
    CREATE: (i?: number) => Delta;
    UPDATE: (i?: number) => Delta;
    REMOVE: (i?: number) => Delta;
};
/**
 * Helper function for constructing entities
 */
declare const entity: (data: Record<string, unknown>, resolve: () => VNode, el?: DOMNode | undefined) => VEntity;
/**
 * Helper method for creating a VNode
 */
declare const m: (tag: string, props?: VProps | undefined, children?: VNode[] | undefined, flag?: VElementFlags, delta?: Delta[] | undefined) => VElement;
declare const resolveVNode: (entityMaybe?: VNode | VEntity | undefined) => VNode | null | undefined;

/**
 * Diffs two VNodes
 */
declare const diff: any;
/**
 * Patches two VNodes and modifies the DOM node based on the necessary changes
 */
declare const patch: (el: DOMNode, newVNode?: VNode | VEntity | undefined, oldVNode?: VNode | VEntity | undefined, hook?: Hook, effects?: Effect[]) => DOMNode;
/**
 * Renders a VNode to the DOM
 */
declare const render: (parentEl: DOMNode, newVNode?: VNode | VEntity | undefined, oldVNode?: VNode | VEntity | undefined, hook?: Hook | undefined) => DOMNode;
declare const hydrate: (el: HTMLElement, vnode: VNode, intersect?: boolean) => void;

declare const isPending: () => boolean;
declare const startTransition: (work: () => void) => void;
declare const flushQueue: (deadline?: IdleDeadline) => void;

declare const _: undefined;

export { Deltas, _, className, createElement, diff, entity, flushQueue, hydrate, isPending, kebab, m, ns, patch, render, resolveVNode, startTransition, style, svg, updateProp, useChildren, useNode, useProps };
