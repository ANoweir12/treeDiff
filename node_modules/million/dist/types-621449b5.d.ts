/**
 * Field on DOM node that stores the previous VNode
 */
declare const OLD_VNODE_FIELD = "__m_old_vnode";
declare type VProps = Record<string, any>;
declare type DOMNode = HTMLElement | SVGElement | Text | Comment;
declare type VNode = VElement | string;
declare type Delta = [DeltaTypes, number];
declare type Hook = (el?: DOMNode, newVNode?: VNode, oldVNode?: VNode) => boolean;
declare type Commit = (work: () => void, data: ReturnType<Driver>) => void;
declare type VElementFlags = Exclude<Flags, Flags.ENTITY>;
declare type Driver = (el: DOMNode, newVNode?: VNode, oldVNode?: VNode, commit?: Commit, effects?: Effect[], driver?: Driver) => {
    el: DOMNode;
    newVNode?: VNode;
    oldVNode?: VNode;
    effects?: Effect[];
    commit?: Commit;
    driver?: Driver;
};
interface Effect {
    type: EffectTypes;
    el: DOMNode;
    flush: () => void;
}
interface VEntity {
    flag: Flags.ENTITY;
    data: Record<string, unknown>;
    resolve: () => VNode;
    el?: DOMNode;
    key?: string;
}
interface VElement {
    flag: VElementFlags;
    tag: string;
    props?: VProps;
    children?: VNode[];
    key?: string;
    delta?: Delta[];
}
declare enum Flags {
    ENTITY = 0,
    ELEMENT = 1,
    ELEMENT_IGNORE = 2,
    ELEMENT_FORCE_UPDATE = 3,
    ELEMENT_SKIP_DRIVERS = 4,
    ELEMENT_NO_CHILDREN = 5,
    ELEMENT_TEXT_CHILDREN = 6,
    ELEMENT_KEYED_CHILDREN = 7
}
declare enum EffectTypes {
    CREATE = 0,
    REMOVE = 1,
    REPLACE = 2,
    UPDATE = 3,
    SET_PROP = 4,
    REMOVE_PROP = 5
}
declare const enum DeltaTypes {
    CREATE = 0,
    UPDATE = 1,
    REMOVE = 2
}

export { Commit as C, DOMNode as D, Effect as E, Flags as F, Hook as H, OLD_VNODE_FIELD as O, VNode as V, VEntity as a, VElement as b, VProps as c, Delta as d, VElementFlags as e, DeltaTypes as f, EffectTypes as g, Driver as h };
