'use strict';

const DOM_REF_FIELD = "__m_dom_ref";
const OLD_VNODE_FIELD = "__m_old_vnode";
const NODE_OBJECT_POOL_FIELD = "__m_node_object_pool";
const XLINK_NS = "http://www.w3.org/1999/xlink";
const XML_NS = "http://www.w3.org/XML/1998/namespace";
const COLON_CHAR = 58;
const X_CHAR = 120;
var Flags = /* @__PURE__ */ ((Flags2) => {
  Flags2[Flags2["ENTITY"] = 0] = "ENTITY";
  Flags2[Flags2["ELEMENT"] = 1] = "ELEMENT";
  Flags2[Flags2["ELEMENT_IGNORE"] = 2] = "ELEMENT_IGNORE";
  Flags2[Flags2["ELEMENT_FORCE_UPDATE"] = 3] = "ELEMENT_FORCE_UPDATE";
  Flags2[Flags2["ELEMENT_SKIP_DRIVERS"] = 4] = "ELEMENT_SKIP_DRIVERS";
  Flags2[Flags2["ELEMENT_NO_CHILDREN"] = 5] = "ELEMENT_NO_CHILDREN";
  Flags2[Flags2["ELEMENT_TEXT_CHILDREN"] = 6] = "ELEMENT_TEXT_CHILDREN";
  Flags2[Flags2["ELEMENT_KEYED_CHILDREN"] = 7] = "ELEMENT_KEYED_CHILDREN";
  return Flags2;
})(Flags || {});
var EffectTypes = /* @__PURE__ */ ((EffectTypes2) => {
  EffectTypes2[EffectTypes2["CREATE"] = 0] = "CREATE";
  EffectTypes2[EffectTypes2["REMOVE"] = 1] = "REMOVE";
  EffectTypes2[EffectTypes2["REPLACE"] = 2] = "REPLACE";
  EffectTypes2[EffectTypes2["UPDATE"] = 3] = "UPDATE";
  EffectTypes2[EffectTypes2["SET_PROP"] = 4] = "SET_PROP";
  EffectTypes2[EffectTypes2["REMOVE_PROP"] = 5] = "REMOVE_PROP";
  return EffectTypes2;
})(EffectTypes || {});
var DeltaTypes = /* @__PURE__ */ ((DeltaTypes2) => {
  DeltaTypes2[DeltaTypes2["CREATE"] = 0] = "CREATE";
  DeltaTypes2[DeltaTypes2["UPDATE"] = 1] = "UPDATE";
  DeltaTypes2[DeltaTypes2["REMOVE"] = 2] = "REMOVE";
  return DeltaTypes2;
})(DeltaTypes || {});

const svg = (vnode) => {
  if (!vnode.props)
    vnode.props = {};
  ns(vnode.tag, vnode.props, vnode.children);
  return vnode;
};
const ns = (tag, props, children) => {
  if (props.className) {
    props.class = props.className;
    props.className = void 0;
  }
  props.ns = "http://www.w3.org/2000/svg";
  if (children && tag !== "foreignObject") {
    for (const child of children) {
      if (typeof child !== "string" && child.props)
        ns(child.tag, child.props, child.children);
    }
  }
};
const className = (classObject) => Object.keys(classObject).filter((className2) => classObject[className2]).join(" ");
const style = (styleObject) => Object.entries(styleObject).map((style2) => style2.join(":")).join(";");
const kebab = (camelCaseObject) => {
  const kebabCaseObject = {};
  for (const key in camelCaseObject) {
    kebabCaseObject[key.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase()] = camelCaseObject[key];
  }
  return kebabCaseObject;
};
const Deltas = {
  CREATE: (i = 0) => [DeltaTypes.CREATE, i],
  UPDATE: (i = 0) => [DeltaTypes.UPDATE, i],
  REMOVE: (i = 0) => [DeltaTypes.REMOVE, i]
};
const entity = (data, resolve, el) => {
  let key = void 0;
  if (data.key) {
    key = data.key;
    data.key = void 0;
  }
  return {
    flag: Flags.ENTITY,
    data,
    resolve,
    el,
    key
  };
};
const m = (tag, props, children, flag = Flags.ELEMENT, delta) => {
  let key = void 0;
  if (props?.key) {
    key = props.key;
    delete props.key;
  }
  const velement = {
    tag,
    props,
    children,
    key,
    flag,
    delta
  };
  return velement.tag.toLowerCase() === "svg" ? svg(velement) : velement;
};
const resolveVNode = (entityMaybe) => {
  if (typeof entityMaybe === "object" && entityMaybe.flag === Flags.ENTITY) {
    return resolveVNode(entityMaybe.resolve());
  }
  return entityMaybe;
};

const normalize = (jsxVNode) => {
  if (Array.isArray(jsxVNode)) {
    const normalizedChildren = [];
    for (let i = 0; i < jsxVNode.length; i++) {
      normalizedChildren.push(normalize(jsxVNode[i]));
    }
    return normalizedChildren;
  } else if (typeof jsxVNode === "string" || typeof jsxVNode === "number" || typeof jsxVNode === "boolean") {
    return String(jsxVNode);
  } else {
    return jsxVNode;
  }
};
const h = (tag, props, ...children) => {
  if (typeof tag === "function") {
    if (children.length) {
      if (!props)
        props = {};
      props.children = children;
    }
    return tag(props);
  }
  let flag = Flags.ELEMENT_NO_CHILDREN;
  let delta;
  const normalizedChildren = [];
  if (props) {
    const rawDelta = props.delta;
    if (rawDelta && rawDelta.length) {
      delta = rawDelta;
      props.delta = void 0;
    }
  }
  if (children) {
    const keysInChildren = /* @__PURE__ */ new Set();
    let hasVElementChildren = false;
    flag = Flags.ELEMENT;
    if (children.every((child) => typeof child === "string")) {
      flag = Flags.ELEMENT_TEXT_CHILDREN;
    }
    let childrenLength = 0;
    for (let i = 0; i < children.length; ++i) {
      if (children[i] !== void 0 && children[i] !== null && children[i] !== false && children[i] !== "") {
        const unwrappedChild = normalize(children[i]);
        const subChildren = Array.isArray(unwrappedChild) ? (childrenLength += unwrappedChild.length, unwrappedChild) : (childrenLength++, [unwrappedChild]);
        for (let i2 = 0; i2 < subChildren.length; i2++) {
          if (subChildren[i2] || subChildren[i2] === "") {
            normalizedChildren.push(subChildren[i2]);
            if (typeof subChildren[i2] === "object") {
              hasVElementChildren = true;
              if (typeof subChildren[i2].key === "string" && subChildren[i2].key !== "") {
                keysInChildren.add(subChildren[i2].key);
              }
            }
          }
        }
      }
    }
    if (keysInChildren.size === childrenLength) {
      flag = Flags.ELEMENT_KEYED_CHILDREN;
    }
    if (!hasVElementChildren) {
      flag = Flags.ELEMENT_TEXT_CHILDREN;
    }
  }
  if (props) {
    if (typeof props.flag === "number") {
      flag = props.flag;
      props.flag = void 0;
    }
    if (typeof props.className === "object") {
      props.className = className(props.className);
    }
    if (typeof props.style === "object") {
      const rawStyle = props.style;
      const normalizedStyle = Object.keys(rawStyle).some((key) => /[-A-Z]/gim.test(key)) ? kebab(rawStyle) : rawStyle;
      props.style = style(normalizedStyle);
    }
  }
  const vnode = m(tag, props, normalizedChildren, flag, delta);
  return tag === "svg" ? svg(vnode) : vnode;
};

exports.COLON_CHAR = COLON_CHAR;
exports.DOM_REF_FIELD = DOM_REF_FIELD;
exports.DeltaTypes = DeltaTypes;
exports.Deltas = Deltas;
exports.EffectTypes = EffectTypes;
exports.Flags = Flags;
exports.NODE_OBJECT_POOL_FIELD = NODE_OBJECT_POOL_FIELD;
exports.OLD_VNODE_FIELD = OLD_VNODE_FIELD;
exports.XLINK_NS = XLINK_NS;
exports.XML_NS = XML_NS;
exports.X_CHAR = X_CHAR;
exports.className = className;
exports.entity = entity;
exports.h = h;
exports.kebab = kebab;
exports.m = m;
exports.normalize = normalize;
exports.ns = ns;
exports.resolveVNode = resolveVNode;
exports.style = style;
exports.svg = svg;
