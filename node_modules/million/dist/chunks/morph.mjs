import { p as patch } from './render.mjs';
import { f as fromDomNodeToVNode, a as fromStringToDomNode } from './convert.mjs';

const cache = /* @__PURE__ */ new Map();
const memo = (key) => {
  if (cache.has(key)) {
    return cache.get(key);
  } else {
    const vnode = fromDomNodeToVNode(fromStringToDomNode(key));
    cache.set(key, vnode);
    return vnode;
  }
};

const morph = (newDOMNode, oldDOMNode, hook = () => true) => patch(oldDOMNode, typeof newDOMNode === "string" ? memo(newDOMNode) : fromDomNodeToVNode(newDOMNode), fromDomNodeToVNode(oldDOMNode), hook);

export { memo as a, morph as m };
